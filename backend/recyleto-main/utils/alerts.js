// utils/alerts.js
const cron = require('node-cron');
const Medicine = require('../models/Medicine');
const Request = require('../models/Request');
const { sendEmail } = require('./mailer');

// Check for expiring medicines
cron.schedule('0 8 * * *', async () => { // Run daily at 8 AM
  try {
    const today = new Date();
    const sevenDays = new Date(today.setDate(today.getDate() + 7));
    const fifteenDays = new Date(today.setDate(today.getDate() + 15));
    const thirtyDays = new Date(today.setDate(today.getDate() + 30));
    
    // Find expiring medicines
    const expiringMedicines = await Medicine.find({
      expiryDate: {
        $lte: thirtyDays,
        $gte: new Date()
      }
    }).populate('pharmacyId');
    
    // Group by pharmacy and send alerts
    const pharmacyAlerts = {};
    expiringMedicines.forEach(medicine => {
      if (!pharmacyAlerts[medicine.pharmacyId]) {
        pharmacyAlerts[medicine.pharmacyId] = [];
      }
      pharmacyAlerts[medicine.pharmacyId].push(medicine);
    });
    
    // Send email alerts
    for (const [pharmacyId, medicines] of Object.entries(pharmacyAlerts)) {
      const pharmacy = medicines[0].pharmacyId;
      if (pharmacy.notificationPreferences && pharmacy.notificationPreferences.email) {
        await sendEmail(
          pharmacy.email,
          'Medicine Expiry Alert',
          `You have ${medicines.length} medicines expiring soon.`
        );
      }
    }
  } catch (error) {
    console.error('Error in expiry alert cron job:', error);
  }
});

// Check for low stock and auto-create requests
cron.schedule('0 9 * * *', async () => { // Run daily at 9 AM
  try {
    const medicines = await Medicine.find({
      stock: { $lt: '$lowStockThreshold' }
    }).populate('pharmacyId');
    
    for (const medicine of medicines) {
      // Check if a request already exists for this medicine
      const existingRequest = await Request.findOne({
        medicineName: medicine.name,
        status: 'pending'
      });
      
      if (!existingRequest) {
        // Create auto-request
        const request = new Request({
          pharmacyId: medicine.pharmacyId,
          medicineName: medicine.name,
          quantity: medicine.lowStockThreshold * 2, // Request double the threshold
          reason: 'Auto-generated low stock request',
          status: 'pending',
          isAutoGenerated: true
        });
        
        await request.save();
        
        // Send notification if enabled
        if (medicine.pharmacyId.notificationPreferences && 
            medicine.pharmacyId.notificationPreferences.email) {
          await sendEmail(
            medicine.pharmacyId.email,
            'Low Stock Alert',
            `${medicine.name} is low on stock. An automatic request has been generated.`
          );
        }
      }
    }
  } catch (error) {
    console.error('Error in low stock alert cron job:', error);
  }
});